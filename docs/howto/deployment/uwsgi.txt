============================
How to use Django with uWSGI
============================

.. highlight:: bash

uWSGI_ is a fast, self-healing and developer/sysadmin-friendly application
container server coded in pure C.

.. _uWSGI: http://projects.unbit.it/uwsgi/

Prerequisite: uWSGI
===================

The wiki describes several `installation procedures`_. Using pip, the python
package manager, installing any uWSGI version can be done with one command
line. For example::

    # install current stable version
    pip install uwsgi

    # or install LTS (long term support)
    pip install http://projects.unbit.it/downloads/uwsgi-lts.tar.gz

.. _installation procedures: http://projects0.unbit.it/uwsgi/wiki/Install

uWSGI model
-----------

uWSGI operates on a client-server model. Your Web server (ie. nginx, Apache)
communicates with a django-uwsgi "worker" process to serve dynamic contents.
See uwsgi's `background documentation`_ for more detail.

.. _background documentation: http://projects.unbit.it/uwsgi/wiki/Background

Configuring and starting the uWSGI server for Django
---------------------------------------

uwsgi supports multiple ways to configure the process, see uwsgi's
`configuration documentation`_ and `examples`_

.. _cofiguration documentation: http://projects.unbit.it/uwsgi/wiki/Doc 
.. _examples: http://projects.unbit.it/uwsgi/wiki/Example

An example command to start a uwsgi server::

    uwsgi --chdir=/path/to/your/project
        --module='django.core.handlers.wsgi:WSGIHandler()' \
        --env DJANGO_SETTINGS_MODULE=settings \
        --master --pidfile=/tmp/project-master.pid \
        --socket=127.0.0.1:49152 \      # can also be a file
        --processes=5 \                 # number of worker processes
        --uid=1000 --gid=2000 \         # if root, uwsgi can drop privileges
        --harakiri=20 \                 # respawn processes taking more than 20 seconds
        --limit-as=128 \                # limit the project to 128 Megabytes
        --max-requests=5000 \           # respawn processes after serving 5000 requests
        --vacuum \                      # clear environment on exit
        --home=/path/to/virtual/env \   # optionnal path to a virtualenv
        --daemonize=/var/log/uwsgi/yourproject.log      # background the process

The Django relevant options are:

* ``chdir``: should be the path to your project
* ``module``: uwsgi module to use
* ``pythonpath``: optional path to your project virtualenv
* ``env``: should contain at least ``DJANGO_SETTINGS_MODULE``

Example ini configuration file::

    [uwsgi]
    chdir=/path/to/your/project
    module='django.core.handlers.wsgi:WSGIHandler()'
    master=True
    pidfile=/tmp/project-master.pid
    vacuum=True
    max-requests=5000
    deamonize=/var/log/uwsgi/yourproject.log

Example ini configuration file usage::

    uwsgi --ini uwsgi.ini


See the uwsgi docs on `managing the uwsgi process`_ for information on
starting, stoping, and reloading the uwsgi workers.

.. _managing the uwsgi process: http://projects.unbit.it/uwsgi/wiki/Management


